<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_e_s_a_p_i_c_url_encoder_8c" kind="file">
    <compoundname>ESAPICUrlEncoder.c</compoundname>
    <includes refid="_e_s_a_p_i_c_url_encoder_8h" local="yes">ESAPICUrlEncoder.h</includes>
    <includes refid="_e_s_a_p_i_c_auxiliary_functions_8h" local="yes">ESAPICAuxiliaryFunctions.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="87">
        <label>/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c</label>
        <link refid="ESAPICUrlEncoder.c"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>ESAPICUrlEncoder.h</label>
        <link refid="_e_s_a_p_i_c_url_encoder_8h"/>
      </node>
      <node id="92">
        <label>stdlib.h</label>
      </node>
      <node id="89">
        <label>ESAPICAuxiliaryFunctions.h</label>
        <link refid="_e_s_a_p_i_c_auxiliary_functions_8h"/>
      </node>
      <node id="94">
        <label>string.h</label>
      </node>
      <node id="90">
        <label>math.h</label>
      </node>
      <node id="93">
        <label>ctype.h</label>
      </node>
      <node id="91">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_e_s_a_p_i_c_url_encoder_8c_1ad730b879e9ba0a6bbc8c632731bfdd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ESAPICUrlEncoderEncode</definition>
        <argsstring>(char *inputString)</argsstring>
        <name>ESAPICUrlEncoderEncode</name>
        <param>
          <type>char *</type>
          <declname>inputString</declname>
        </param>
        <briefdescription>
<para>Returns a url-encoded version of the given input string. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_e_s_a_p_i_c_url_encoder_8c" kindref="compound">ESAPICUrlEncoder.c</ref> ESAPI</para><para>Created by DEEPAK SUBRAMANIAN on 4/18/11. Copyright 2011 OWASP Foundation. All rights reserved. This code has been downloaded from <ulink url="http://www.geekhideout.com/urlcode.shtml">http://www.geekhideout.com/urlcode.shtml</ulink> on April 16, 2011 IMPORTANT: be sure to free() the returned string after use This code has been downloaded from <ulink url="http://www.geekhideout.com/urlcode.shtml">http://www.geekhideout.com/urlcode.shtml</ulink> on April 16, 2011</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputString</parametername>
</parameternamelist>
<parameterdescription>
<para>- This is the input string which needs to be decoded </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The decoded string IMPORTANT: be sure to free() the returned string after use </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c" line="29" bodyfile="/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c" bodystart="28" bodyend="46"/>
        <references refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a2729474e3f010e609583b6d3eef22e1a" compoundref="_e_s_a_p_i_c_auxiliary_functions_8c" startline="23" endline="27">to_hex</references>
        <referencedby refid="_e_s_a_p_i_c_encoder_8h_1a452d1773180a64b14c95a47686847737" compoundref="_e_s_a_p_i_c_encoder_8c" startline="18" endline="60">ESAPIEncode</referencedby>
      </memberdef>
      <memberdef kind="function" id="_e_s_a_p_i_c_url_encoder_8c_1ae873a9107bec72e66b546950c5e83e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ESAPICUrlEncoderDecode</definition>
        <argsstring>(char *inputString)</argsstring>
        <name>ESAPICUrlEncoderDecode</name>
        <param>
          <type>char *</type>
          <declname>inputString</declname>
        </param>
        <briefdescription>
<para>Returns a url-decoded version of the given string. </para>        </briefdescription>
        <detaileddescription>
<para>This code has been downloaded from <ulink url="http://www.geekhideout.com/urlcode.shtml">http://www.geekhideout.com/urlcode.shtml</ulink> on April 16, 2011</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputString</parametername>
</parameternamelist>
<parameterdescription>
<para>- This is the input string which needs to be decoded </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The decoded string IMPORTANT: be sure to free() the returned string after use </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c" line="57" bodyfile="/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c" bodystart="56" bodyend="81"/>
        <references refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a808bcf33a4b41b04fc0bc6a5f5813973" compoundref="_e_s_a_p_i_c_auxiliary_functions_8c" startline="15" endline="18">from_hex</references>
        <referencedby refid="_e_s_a_p_i_c_encoder_8h_1a6c2931ce40e18b2a2244c441bc9bbd9b" compoundref="_e_s_a_p_i_c_encoder_8c" startline="63" endline="105">ESAPIDecode</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_e_s_a_p_i_c_url_encoder_8h" kindref="compound">ESAPICUrlEncoder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_e_s_a_p_i_c_auxiliary_functions_8h" kindref="compound">ESAPICAuxiliaryFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="_e_s_a_p_i_c_url_encoder_8h_1ad730b879e9ba0a6bbc8c632731bfdd82" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_e_s_a_p_i_c_url_encoder_8c_1ad730b879e9ba0a6bbc8c632731bfdd82" kindref="member" tooltip="Returns a url-encoded version of the given input string.">ESAPICUrlEncoderEncode</ref><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inputString<sp/>)<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/>Encoding<sp/>initiated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pstr<sp/>=*inputString<sp/>,<sp/>*buf<sp/>=<sp/>malloc(<sp/>strlen(<sp/>inputString<sp/>)<sp/>*<sp/>3<sp/>+<sp/>1<sp/>),<sp/>*pbuf<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*pstr<sp/>)<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isalnum(*pstr)<sp/>||<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>||<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>||<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>)<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/>*pstr;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>)<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">,<sp/>*pbuf++<sp/>=<sp/><ref refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a2729474e3f010e609583b6d3eef22e1a" kindref="member" tooltip="Converts an integer value to its hex character.">to_hex</ref>(<sp/>*pstr<sp/>&gt;&gt;<sp/>4<sp/>),<sp/>*pbuf++<sp/>=<sp/><ref refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a2729474e3f010e609583b6d3eef22e1a" kindref="member" tooltip="Converts an integer value to its hex character.">to_hex</ref>(<sp/>*pstr<sp/>&amp;<sp/>15<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pstr++;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="_e_s_a_p_i_c_url_encoder_8h_1ae873a9107bec72e66b546950c5e83e38" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_e_s_a_p_i_c_url_encoder_8c_1ae873a9107bec72e66b546950c5e83e38" kindref="member" tooltip="Returns a url-decoded version of the given string.">ESAPICUrlEncoderDecode</ref><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inputString<sp/>)<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pstr<sp/>=<sp/>inputString,<sp/>*buf<sp/>=<sp/>malloc(<sp/>strlen(<sp/>inputString<sp/>)<sp/>+<sp/>1),<sp/>*pbuf<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*pstr<sp/>)<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>)<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pstr[1]<sp/>&amp;&amp;<sp/>pstr[2]<sp/>)<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/><ref refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a808bcf33a4b41b04fc0bc6a5f5813973" kindref="member" tooltip="Converts a hex character to its integer value.">from_hex</ref>(<sp/>pstr[1]<sp/>)<sp/>&lt;&lt;<sp/>4<sp/>|<sp/><ref refid="_e_s_a_p_i_c_auxiliary_functions_8c_1a808bcf33a4b41b04fc0bc6a5f5813973" kindref="member" tooltip="Converts a hex character to its integer value.">from_hex</ref>(<sp/>pstr[2]<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pstr<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*pstr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>)<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf++<sp/>=<sp/>*pstr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pstr++;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbuf<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/deepaksubramanian/Documents/Folder of Documents/XCode/ESAPI_COMPLETE/branches/ESAPI Branch Cuckoo/Pure C functions/ESAPIEncoder/ESAPICUrlEncoder.c"/>
  </compounddef>
</doxygen>
